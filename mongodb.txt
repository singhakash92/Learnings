1) process.env
this global object is automatically created when we run our application so we don't need to import it inorder to use it

config function in dotenv loads up the data from .env files into process.env so that it can be read


import mongoose from "mongoose";

const subscriptionSchema = new mongoose.Schema(
{
    type : String | Number |Date,  
    requried : [true , "xyz is required"],
    trim : true ,    //removes the extra spaces,
    minLength : 2, 
    maxLength : 50, 
    min : [0, "xyz value must be greater than 0"],    //for number
    max  : [400, "xyz value must be smaller that 400"],   //for number
    lowercase : true,
    match : [/\s+@\s+\.\s+/, "please enter a valid email id"],
    enum: ["USD", "EURO", "INR"],   //type will be string only but only the the value must be something which is present in the array
    default : "USD"
}
startDate: {
      type: Date,
      required: true,
      validate: {
        validator: (value) => {
          return value <= new Date();
        },
        message: "start date must be in past",
      },
    },
    renewalDate: {
      type: Date,
      required: true,
      validate: {
          validator: function (value) {
              return value > this.startDate;
          },
        message: "start date must be in future",
      },
        },
}
####this keyword is used to access the entries of this data that will be putted inside the DB####
####we want to execute a function before saving the entry for this data

subscriptionSchema.pre("save", function (next) {

    if (!this.renewalDate) {
        const renewalPeriod = {
            daily: 1, 
            weekly: 7, 
            monthly: 30, 
            yearly : 365
        }
        
        this.renewalDate = new Date(this.startDate)
        this.renewalDate.setDate(this.renewalDate.getDate() + renewalPeriod[this.frequency])
    }

    if (this.renewalDate < new Date) {
        this.status = "expired "
    }
    next()  
})

)

const Subscription = mongoose.model("Subscription", subscriptionSchema);

export default Subscription;




const users = await User.find().select('-password');   //gives all the field except for the password



// while searching using a _id if we have given a wrong id 
        if (err.name === 'CastError') {
            const message = "resource not found"
            error = new Error(message);
            error.statusCode(404)
        }

        //list of all validation error means the field we have in our table for each field if any field throws an error
        if (err.name === "ValidationError") {
            const message = Object.values(err.error).map((val) => val.message)
            error = new Error(message.join(", "))
            error.statusCode(400)
               
        };

        // field which should a unique value we are providing a value which is already present
        if (error.code === 11000) {
            const message = "duplicate field value entered";
            error = new Error(message);
            error.statusCode(404)
        }



4 priciples to make sure reliable database transaction 
1) atomicity - the txn happening shoule be "all or nothing",  so we start a session, ex : money transfer
2) consistency - the txn happening should take dB from one valid state to another , 
- All rules, constraints, and triggers must be enforced
- example : rules:
            total amount can never me negative(let say 1000)
            each txn value should be more than 0

            condn:
            make txn of 100 (works fine)
            make txn of 1200(it will make total amount in -ive so don't execute this )

3) Isolation - each txn happening should be isolated
-   Multiple transactions occurring at the same time should not affect each other

Initial state: Alice ($1000), Bob ($500)
Two simultaneous transactions:
Transaction 1: Alice sends $800 to Bob
Transaction 2: Alice sends $500 to Bob


Without isolation (BAD):
Time | Transaction 1 | Transaction 2

Both transactions read Alice's balance ($1000)
T1 thinks: "1000 - 800 = 200" (sufficient funds)
T2 thinks: "1000 - 500 = 500" (sufficient funds)
Both transactions proceed
Result: Alice has -$300 (violated consistency!)


With proper isolation (GOOD):
"Transaction 1 *locks* the accounts firs"t:

Reads $1000
Subtracts $800
New balance $200


Transaction 2 waits, then:
Reads $200
Cannot subtract $500 (insufficient funds)
Transaction rejected


Final state: Alice ($200), Bob ($1300)

4) durable - once the txn is commited , it will remain commited even if there is a system failure